Program.Sub.Preflight.Start
V.Global.sUpdatePath.Declare(String, "")
V.Global.sClosePath.Declare(String, "")
Program.External.Include.Library("2003.lib")
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_5917_ProcessFiles.g2u
'Trey S
'March 17th, 2020
'for Voelstapine
'Ticket VOE010-122020191315-8
'Quote 12011
'This script will process files with due date changes and work order completions coming from Voelstapine's internal SRMS
'The paths to read from are maintained in GCG_5917_Settings.g2u
'This will run from the post online update hook, 38130

F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)

'check and make sure we are not already running
F.Intrinsic.Control.CallSub(ScriptPIDCheck, "Project", "5917", "Task", "GCG_5917_ProcessFiles")

'read the set paths for processing
F.Intrinsic.Control.CallSub(ReadPaths)

'read the files
F.Intrinsic.Control.CallSub(ReadFiles)

'process any updates
F.Intrinsic.Control.If(V.DataTable.dtUpdates.Exists)
	F.Intrinsic.Control.If(V.DataTable.dtUpdates.RowCount, >, 0)
		F.Intrinsic.String.Build("[{0}] due date update transactions found to be processed.", V.DataTable.dtUpdates.RowCount, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", V.Local.sMessage)
		F.Intrinsic.Control.CallSub(UpdateWorkOrderDueDates)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'process any WIP to FGs
F.Intrinsic.Control.If(V.DataTable.dtClose.Exists)
	F.Intrinsic.Control.If(V.DataTable.dtClose.RowCount, >, 0)
		F.Intrinsic.String.Build("[{0}] WIP to FG transactions found to be processed.", V.DataTable.dtClose.RowCount, V.Local.sMessage)
		F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", V.Local.sMessage)
		F.Intrinsic.Control.CallSub(WIPToFG)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'clean up, exit
F.Intrinsic.Control.CallSub(Exit)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.ReadPaths.Start
F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)
V.Local.bExists.Declare(Boolean)

'get update path
F.Intrinsic.String.Build("{0}\Custom\5917\{1}\Settings\Work_Order_Due_Date_Update_Path.dat", V.Caller.GlobalDir, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.File.Exists(V.Local.sPath, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.File2String(V.Local.sPath, V.Global.sUpdatePath)
	F.Intrinsic.String.TrimCharR(V.Global.sUpdatePath, "/", V.Global.sUpdatePath)
	F.Intrinsic.String.TrimCharR(V.Global.sUpdatePath, "\", V.Global.sUpdatePath)
	V.Global.sUpdatePath.Append("\")
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", "No path for updating work order due dates found, these files will not be processed.")
F.Intrinsic.Control.EndIf

'get close path
F.Intrinsic.String.Build("{0}\Custom\5917\{1}\Settings\Work_Order_Close_Path.dat", V.Caller.GlobalDir, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.File.Exists(V.Local.sPath, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.File2String(V.Local.sPath, V.Global.sClosePath)
	F.Intrinsic.String.TrimCharR(V.Global.sClosePath, "/", V.Global.sClosePath)
	F.Intrinsic.String.TrimCharR(V.Global.sClosePath, "\", V.Global.sClosePath)
	V.Global.sClosePath.Append("\")
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", "No path for closing work orders found, these files will not be processed.")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.ReadPaths.End

Program.Sub.ReadFiles.Start
F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.sFileList.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sNewPath.Declare(String)
V.Local.sUpdateProcessedPath.Declare(String)
V.Local.sCloseProcessedPath.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.iJ.Declare(Long)
V.Local.sSplit.Declare(String)
V.Local.sJob.Declare(String)
V.Local.sExtension.Declare(String)
V.Local.sTimestamp.Declare(String)
V.Local.sNewName.Declare(String)
V.Local.sFileName.Declare(String)
V.Local.sMessage.Declare(String)

'create the datatables for processing
F.Data.Datatable.Create("dtUpdates", True)
F.Data.Datatable.AddColumn("dtUpdates", "WORK_ORDER", "String", "")
F.Data.Datatable.AddColumn("dtUpdates", "JOB", "String", "")
F.Data.Datatable.AddColumn("dtUpdates", "SUFFIX", "String", "")
F.Data.Datatable.AddColumn("dtUpdates", "DUE_DATE", "String", "")

F.Data.Datatable.Create("dtClose", True)
F.Data.Datatable.AddColumn("dtClose", "WORK_ORDER", "String", "")
F.Data.Datatable.AddColumn("dtClose", "JOB", "String", "")
F.Data.Datatable.AddColumn("dtClose", "SUFFIX", "String", "")

'load update files
F.Intrinsic.Control.If(V.Global.sUpdatePath.Trim, !=, "")
	F.Intrinsic.String.Build("{0}Processed", V.Global.sUpdatePath, V.Local.sUpdateProcessedPath)
	F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sUpdateProcessedPath)
	
	F.Intrinsic.File.GetFileList(V.Global.sUpdatePath, V.Local.sFileList)
	F.Intrinsic.Control.If(V.Local.sFileList.Trim, !=, "")
		F.Intrinsic.String.Split(V.Local.sFileList, ":", V.Local.sFileList)
		F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sFileList.UBound, 1)
			F.Intrinsic.String.Build("{0}{1}", V.Global.sUpdatePath, V.Local.sFileList(V.Local.iCounter), V.Local.sFile)
			F.Intrinsic.File.File2String(V.Local.sFile, V.Local.sContents)
			
			F.Intrinsic.String.Build("Reading due date update file [{0}].", V.Local.sFile, V.Local.sMessage)
			F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", V.Local.sMessage)
			
			'move file to processed directory.
			F.Intrinsic.File.GetExtensionComponent(V.Local.sFile, V.Local.sExtension)
			F.Intrinsic.String.Format(V.Ambient.Now, "YYYY-MM-DD HH-NN-SS", V.Local.sTimestamp)
			F.Intrinsic.String.Replace(V.Local.sFileList(V.Local.iCounter), V.Local.sExtension, "", V.Local.sFileName)
			F.Intrinsic.String.Replace(V.Local.sFileName, ".", "", V.Local.sFileName)
			F.Intrinsic.String.Build("{0} {1}.{2}", V.Local.sFileName, V.Local.sTimestamp, V.Local.sExtension, V.Local.sNewName)
			F.Intrinsic.Control.CallSub(MoveFile, "File", V.Local.sFile, "New_Path", V.Local.sUpdateProcessedPath, "NEW_NAME", V.Local.sNewName)
			
			F.Intrinsic.String.Build("Moving due date update file [{0}] to [{1}] as [{2}].", V.Local.sFile, V.Local.sUpdateProcessedPath, V.Local.sNewName, V.Local.sMessage)
			F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", V.Local.sMessage)
			
			F.Intrinsic.String.Split(V.Local.sContents, V.Ambient.NewLine, V.Local.sContents)
			F.Intrinsic.Control.For(V.Local.iJ, 0, V.Local.sContents.UBound, 1)
				
				'format should be work order, due date
				F.Intrinsic.String.Split(V.Local.sContents(V.Local.iJ), ",", V.Local.sSplit)
				F.Intrinsic.Control.If(V.Local.sSplit.UBound, >, 0)
					
					'split out the job/suffix
					F.Intrinsic.String.Split(V.Local.sSplit(0), "-", V.Local.sJob)
					F.Intrinsic.Control.If(V.Local.sJob.UBound, >, 0)
						F.Data.Datatable.AddRow("dtUpdates", "WORK_ORDER", V.Local.sSplit(0).Trim, "DUE_DATE", V.Local.sSplit(1).Trim, "JOB", V.Local.sJob(0).Trim, "SUFFIX", V.Local.sJob(1).Trim)
					F.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iJ)
		F.Intrinsic.Control.Next(V.Local.iCounter)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'load wip to fg files
F.Intrinsic.Control.If(V.Global.sClosePath.Trim, !=, "")
	F.Intrinsic.String.Build("{0}Processed", V.Global.sClosePath, V.Local.sCloseProcessedPath)
	F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sCloseProcessedPath)
	
	F.Intrinsic.File.GetFileList(V.Global.sClosePath, V.Local.sFileList)
	F.Intrinsic.Control.If(V.Local.sFileList.Trim, !=, "")
		F.Intrinsic.String.Split(V.Local.sFileList, ":", V.Local.sFileList)
		F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sFileList.UBound, 1)
			F.Intrinsic.String.Build("{0}{1}", V.Global.sClosePath, V.Local.sFileList(V.Local.iCounter), V.Local.sFile)
			F.Intrinsic.File.File2String(V.Local.sFile, V.Local.sContents)
			
			F.Intrinsic.String.Build("Reading WIP to FG file [{0}].", V.Local.sFile, V.Local.sMessage)
			F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", V.Local.sMessage)
			
			'move file to processed directory.
			F.Intrinsic.File.GetExtensionComponent(V.Local.sFile, V.Local.sExtension)
			F.Intrinsic.String.Format(V.Ambient.Now, "YYYY-MM-DD HH-NN-SS", V.Local.sTimestamp)
			F.Intrinsic.String.Replace(V.Local.sFileList(V.Local.iCounter), V.Local.sExtension, "", V.Local.sFileName)
			F.Intrinsic.String.Replace(V.Local.sFileName, ".", "", V.Local.sFileName)
			F.Intrinsic.String.Build("{0} {1}.{2}", V.Local.sFileName, V.Local.sTimestamp, V.Local.sExtension, V.Local.sNewName)
			F.Intrinsic.Control.CallSub(MoveFile, "File", V.Local.sFile, "New_Path", V.Local.sCloseProcessedPath, "NEW_NAME", V.Local.sNewName)
			
			F.Intrinsic.String.Build("Moving WIP to FG file [{0}] to [{1}] as [{2}].", V.Local.sFile, V.Local.sCloseProcessedPath, V.Local.sNewName, V.Local.sMessage)
			F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", V.Local.sMessage)
			
			F.Intrinsic.String.Split(V.Local.sContents, V.Ambient.NewLine, V.Local.sContents)
			F.Intrinsic.Control.For(V.Local.iJ, 0, V.Local.sContents.UBound, 1)
				F.Intrinsic.Control.If(V.Local.sContents(V.Local.iJ).Trim, !=, "")
					
					'split out job/suffix
					F.Intrinsic.String.Split(V.Local.sContents(V.Local.iJ), "-", V.Local.sJob)
					F.Intrinsic.Control.If(V.Local.sJob.UBound, >, 0)
						F.Data.Datatable.AddRow("dtClose", "WORK_ORDER", V.Local.sContents(V.Local.iJ), "JOB", V.Local.sJob(0).Trim, "SUFFIX", V.Local.sJob(1).Trim)
					F.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iJ)
			
		F.Intrinsic.Control.Next(V.Local.iCounter)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Data.Datatable.AddExpressionColumn("dtUpdates", "DATE_CONVERTED", "Date", "Convert([DUE_DATE], 'System.DateTime')")
F.Data.Datatable.AddColumn("dtUpdates", "DATE_FORMATTED", "String", "")
F.Data.Datatable.SetValueFormat("dtUpdates", -1, "DATE_CONVERTED", "DATE_FORMATTED", "MMDDYY")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.ReadFiles.End

Program.Sub.UpdateWorkOrderDueDates.Start
'save the new due dates back to the database

V.Local.sMessage.Declare(String)

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)

F.ODBC.Connection!Con.OpenCompanyConnection

'check if work orders exist
F.Data.Datatable.AddExpressionColumn("dtUpdates", "FULL_JOB", "String", "Trim([JOB]) + Trim([SUFFIX])")
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtUpdates", "Field", "FULL_JOB")
F.Intrinsic.String.Build("select RTRIM(JOB) + RTRIM(SUFFIX) JS, Cast(1 as Bit) from V_JOB_HEADER where JS in ('{0}')", V.Args.Filter, V.Local.sSQL)

F.Data.Dictionary.CreateFromSQL("dictWorkOrders", "Con", V.Local.sSQL)
F.Data.Dictionary.SetDefaultReturn("dictWorkOrders", False)
F.Data.Datatable.AddColumn("dtUpdates", "JOB_EXISTS", "Boolean", False)
F.Data.Datatable.FillFromDictionary("dtUpdates", "dictWorkOrders", "FULL_JOB", "JOB_EXISTS")
F.Data.Dictionary.Close("dictWorkOrders")

F.Data.DataView.Create("dtUpdates", "dvValid", 22, "[JOB_EXISTS] = True", "")
F.Data.DataView.ToDataTable("dtUpdates", "dvValid", "dtValid")
F.Data.DataView.Close("dtUpdates", "dvValid")

F.Intrinsic.String.Build("[{0}] update due date transactions found with valid work orders to be processed.", V.DataTable.dtValid.RowCount, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", V.Local.sMessage)

F.Intrinsic.Control.If(V.DataTable.dtValid.RowCount, >, 0)
	F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", "Updating new due dates to database...")
	F.Data.Datatable.SaveToDB("dtValid", "Con", "JOB_HEADER", "JOB*!*SUFFIX", 256, "JOB@!@JOB*!*SUFFIX@!@SUFFIX*!*DATE_FORMATTED@!@DATE_DUE")
	F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", "Update complete.")
F.Intrinsic.Control.EndIf
F.Data.Datatable.Close("dtValid")

F.ODBC.Connection!Con.Close

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.UpdateWorkOrderDueDates.End

Program.Sub.WIPToFG.Start
F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sSQL.Declare(String)

F.ODBC.Connection!Con.OpenCompanyConnection

'check if work orders exist
F.Data.Datatable.AddExpressionColumn("dtClose", "FULL_JOB", "String", "Trim([JOB]) + Trim([SUFFIX])")
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtClose", "Field", "FULL_JOB")
F.Intrinsic.String.Build("select RTRIM(JOB) + RTRIM(SUFFIX) JS, Cast(1 as Bit) from V_JOB_HEADER where JS in ('{0}')", V.Args.Filter, V.Local.sSQL)

F.Data.Dictionary.CreateFromSQL("dictWorkOrders", "Con", V.Local.sSQL)
F.Data.Dictionary.SetDefaultReturn("dictWorkOrders", False)
F.Data.Datatable.AddColumn("dtClose", "JOB_EXISTS", "Boolean", False)
F.Data.Datatable.FillFromDictionary("dtClose", "dictWorkOrders", "FULL_JOB", "JOB_EXISTS")
F.Data.Dictionary.Close("dictWorkOrders")

F.Data.DataView.Create("dtClose", "dvValid", 22, "[JOB_EXISTS] = True", "")
F.Data.DataView.ToDataTable("dtClose", "dvValid", "dtValid")
F.Data.DataView.Close("dtClose", "dvValid")

F.Intrinsic.String.Build("[{0}] WIP to FG transactions found with valid work orders to be processed.", V.DataTable.dtValid.RowCount, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", V.Local.sMessage)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtValid.RowCount--, 1)
	F.Data.DataTable.AddRow("2003", "Mode", "NS", "WONum", V.DataTable.dtValid(V.Local.iCounter).JOB!FieldValTrim, "WOSuffix", V.DataTable.dtValid(V.Local.iCounter).SUFFIX!FieldValTrim, "CloseWO", "Y", "Quantity", 1, "PrintLabels", "N")
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.Datatable.Close("dtValid")

F.ODBC.Connection!Con.Close

'launch the callwrapper
F.Intrinsic.Control.If(V.DataTable.2003.RowCount, >, 0)
	F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", "Running WIP to FG callwrapper 2003...")
	F.Intrinsic.Control.CallSub(2003Sync)
	F.Intrinsic.Control.CallSub(AddLog, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "Message", "WIP to FG callwrapper 2003 processing complete.")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.WIPToFG.End

Program.Sub.Exit.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataTable.dtClose.Exists)
	F.Data.Datatable.Close("dtClose")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtUpdates.Exists)
	F.Data.Datatable.Close("dtUpdates")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(ScriptPIDClear, "Project", "5917", "Task", "GCG_5917_ProcessFiles")
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.Exit.End

Program.Sub.ScriptPIDCheck.Start
'check if the process is already running
'store PID in a text file
'Pass folder to store in 	- PROJECT
'what to name file			- TASK

F.Intrinsic.Control.Try

V.Local.bExists.Declare(Boolean)
V.Local.sDir.Declare(String)
V.Local.sCurrentPIDProcess.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sProject.Declare(String)
V.Local.sTask.Declare(String)

V.Local.sProject.Set(V.Args.Project)
V.Local.sTask.Set(V.Args.Task)

F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\IS_RUNNING", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Local.sDir)
F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sDir)

F.Intrinsic.String.Build("{0}\{1}_Running.dat", V.Local.sDir, V.Local.sTask, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)

F.Intrinsic.Control.If(V.Local.bExists.Not)
	'program is not running
	'Create Program Status file to let it know its running
	F.Intrinsic.File.String2File(V.Local.sFile, V.Ambient.PID)
F.Intrinsic.Control.Else
 	'then the file exists: get the PID from the file to see if the process is still running
	F.Intrinsic.File.File2String(V.Local.sFile, V.Local.sCurrentPIDProcess)
	F.Intrinsic.Task.PIDRunning(V.Local.sCurrentPIDProcess, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists)
		'the the program is running- don't start new process
		F.Intrinsic.Control.End
	F.Intrinsic.Control.Else
		'the program has stopped, but did not delete the file. Delete the file and create a new file for current run
		F.Intrinsic.File.DeleteFile(V.Local.sFile)
		F.Intrinsic.File.String2File(V.Local.sFile, V.Ambient.PID)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.ScriptPIDCheck.End

Program.Sub.ScriptPIDClear.Start
'delete the is running file, so the next time the program runs it knows it isn't currently running
'Pass folder to store in 	- PROJECT
'filename  base				- TASK

F.Intrinsic.Control.Try

V.Local.bExists.Declare(Boolean)
V.Local.sDir.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sProject.Declare(String)
V.Local.sTask.Declare(String)

V.Local.sProject.Set(V.Args.Project)
V.Local.sTask.Set(V.Args.Task)

F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\IS_RUNNING", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Local.sDir)
F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sDir)

F.Intrinsic.String.Build("{0}\{1}_Running.dat", V.Local.sDir, V.Local.sTask, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)

F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.DeleteFile(V.Local.sFile)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.ScriptPIDClear.End

Program.Sub.AddLog.Start
'pass a project #, and a message
'date and time will be automatically added
'pass PROJECT (Folder, log name)
'MESSAGE (what to log)

F.Intrinsic.Control.Try

V.Local.sProject.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sTask.Declare(String)

V.Local.sProject.Set(V.Args.Project.Trim)
V.Local.sMessage.Set(V.Args.Message.Trim)
V.Local.sTask.Set(V.Args.Task)

F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.File.MakeFilenameFriendly(V.Local.sProject, V.Local.sProject)
F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\Log", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sPath)

F.Intrinsic.String.Build("{0}\{1}_Log.txt", V.Local.sPath, V.Local.sTask, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.String.Build("{0} {1}:{2}Log Start", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time, V.Ambient.Tab, V.Local.sContents)
	F.Intrinsic.File.String2File(V.Local.sFile, V.Local.sContents)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("{0} {1}:{2}{3}", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time, V.Ambient.Tab, V.Local.sMessage, V.Local.sContents)
F.Intrinsic.File.Append2FileNewLine(V.Local.sFile, V.Local.sContents)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.AddLog.End

Program.Sub.MoveFile.Start
'move file to the given directory
'create the directory if it doesn't exist
'if file already exists there, add a suffix
'pass FILE, NEW_PATH, NEW_NAME (Optional, if name changing)

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.sNewPath.Declare(String)
V.Local.bExists.Declare(boolean)
V.Local.iCounter.Declare(Long, 0)
V.Local.sFileName.Declare(String)
V.Local.sNewFile.Declare(String)
V.Local.sNewFileTemp.Declare(String)
V.Local.sSlash.Declare(String, "")
V.Local.bMoved.Declare(Boolean)
V.Local.sNewName.Declare(String, "")

V.Local.sFile.Set(V.Args.FILE)
V.Local.sNewPath.Set(V.Args.NEW_PATH)
F.Intrinsic.Variable.ArgExists("NEW_NAME", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sNewName.Set(V.Args.NEW_NAME)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sNewPath)

F.Intrinsic.Control.If(V.Local.sNewPath.Right1, !=, "\")
	V.Local.sSlash.Set("\")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.sNewName.Trim, =, "")
	F.Intrinsic.File.GetFileNameFromFQN(V.Local.sFile, V.Local.sFileName)
F.Intrinsic.Control.Else
	V.Local.sFileName.Set(V.Local.sNewName)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}{2}", V.Local.sNewPath, V.Local.sSlash, V.Local.sFileName, V.Local.sNewFile)

F.Intrinsic.File.Exists(V.Local.sNewFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.DoUntil(V.Local.bExists.Not)
		F.Intrinsic.Math.Add(V.Local.iCounter, 1, V.Local.iCounter)
		F.Intrinsic.String.Split(V.Local.sNewFile, ".", V.Local.sNewFileTemp)
		F.Intrinsic.String.Build("{0}_{1}", V.Local.sNewFileTemp(0), V.Local.iCounter, V.Local.sNewFileTemp(0))
		F.Intrinsic.String.Join(V.Local.sNewFileTemp, ".", V.Local.sNewFileTemp)
		F.Intrinsic.File.Exists(V.Local.sNewFileTemp, V.Local.bExists)
	F.Intrinsic.Control.Loop
	V.Local.sNewFile.Set(V.Local.sNewFileTemp)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.MoveFile(V.Local.sFile, V.Local.sNewFile, V.Local.bMoved)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.MoveFile.End

Program.Sub.CheckDirectories.Start
'check if the given import directories exist
'create them if they don't
'pass directories delimited with *!*

F.Intrinsic.Control.Try

V.Local.sDirectories.Declare(String)
V.Local.sPath.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.iCounter.Declare(Long)

V.Local.sDirectories.Set(V.Args.Directories)
F.Intrinsic.String.Split(V.Local.sDirectories, "*!*", V.Local.sDirectories)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sDirectories.UBound, 1)
	V.Local.sPath.Set(V.Local.sDirectories(V.Local.iCounter))
	F.Intrinsic.File.DirExists(V.Local.sPath, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists.Not)
		F.Intrinsic.File.CreateDir(V.Local.sPath)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.CheckDirectories.End

Program.Sub.GetFilter.Start
'pass DATATABLE, FIELD (*!* delimiter)
'returns filter
'returns a list of the distinct values of that field delimited by ','

F.Intrinsic.Control.Try

V.Local.iCounter.Declare(Long, 0)
V.Local.sFilter.Declare(String)
V.Local.sDataView.Declare(String, "dvGetFilterTemp_0")
V.Local.sDataViewFilter.Declare(String)

'make sure no duplicate dataview
F.Intrinsic.Control.DoUntil(V.DataView.[V.Args.DataTable]![V.Local.sDataView].Exists, =, False)
	F.Intrinsic.String.Build("dvGetFilterTemp_{0}", V.Local.iCounter.++, V.Local.sDataView)
F.Intrinsic.Control.Loop

'create in filter
F.Intrinsic.String.Build("Convert([{0}], 'System.String') <> ''", V.Args.Field, V.Local.sDataViewFilter)
F.Data.DataView.Create(V.Args.DataTable, V.Local.sDataView, 22, V.Local.sDataViewFilter, "")
F.Data.DataView.ToString(V.Args.DataTable, V.Local.sDataView, V.Args.Field, "***NODELIMITER***", "','", V.Local.sFilter)
F.Data.DataView.Close(V.Args.DataTable, V.Local.sDataView)

'remove duplicates
F.Intrinsic.String.Split(V.Local.sFilter, "','", V.Local.sFilter)
F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sFilter, V.Local.sFilter)
F.Intrinsic.String.Join(V.Local.sFilter, "','", V.Local.sFilter)
V.Local.sFilter.RedimPreserve(0,0)

F.Intrinsic.Variable.AddRV("FILTER", V.Local.sFilter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.GetFilter.End

Program.Sub.UnattendedErrorMessage.Start
'send a short error message, add the log
'pass project ID, project title (for message box title), and error message

F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)

V.Local.sMessage.Set(V.Args.Message.Trim)
F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.UI.InvokeWaitDialog(V.Local.sMessage, V.Args.ProjectTitle)
F.Intrinsic.UI.Sleep(10)
F.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.CallSub(AddLog, "Project", V.Args.Project, "TASK", V.Args.Task, "Message", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "Exit", "Unattended", True, "Project", "5917", "Task", "GCG_5917_ProcessFiles", "ProjectTitle", "5917 SRMS Integration")
F.Intrinsic.Control.EndTry
Program.Sub.UnattendedErrorMessage.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called
F.Intrinsic.Control.Try

V.Local.iError.Declare(Long)
V.Local.sErrorDescription.Declare(String)
V.Local.sSubroutine.Declare(String)
V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)
V.Static.bError.Declare(Boolean, False)

V.Local.iError.Set(V.Args.ErrorNumber)
V.Local.sErrorDescription.Set(V.Args.ErrorDescription)
V.Local.sSubroutine.Set(V.Args.Subroutine)

'make sure we aren't in an error loop
F.Intrinsic.Control.If(V.Static.bError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf
V.Static.bError.Set(True)

F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Local.sSubroutine, V.Local.iError, V.Local.sErrorDescription, V.Ambient.GABVersion, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE, "TASK", V.Args.Task)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End

Program.Sub.Comments.Start
${$5$}$3.0.0.0$}$1
${$6$}$rseddon$}$20200318144522511$}$DkKb6sybY9hE3N0enyRwKJuHSlMGTgRbRVPmpEz9aLxU7gNl40PYA5pgiq+6MnrGGX6CAhG57f0=
Program.Sub.Comments.End